{
  "name": "Resize Binaural",
  "language": 0,
  "code": "using System;\r\nusing System.Drawing;\r\n\r\n// The 'windowHandle' parameter will contain the window handle for the:\r\n//   - Active window when run by hotkey\r\n//   - Trigger target when run by a Trigger rule\r\n//   - TitleBar Button owner when run by a TitleBar Button\r\n//   - Jump List owner when run from a Taskbar Jump List\r\n//   - Currently focused window if none of these match\r\npublic static class DisplayFusionFunction {\r\n\tpublic static void Run(IntPtr windowHandle)\t{\r\n\t\r\n        //collects the value set by the Toggle Focus script\r\n        uint activeMonitor = (uint) BFS.ScriptSettings.ReadValueInt(\"liveMonitor\");\r\n\t\t\r\n\t\t// Gets the main window\r\n\t\tIntPtr binauralWindow = BFS.Window.GetWindowByText(\"*3 HOURS Creativity and Focus ~ Binaural Beats - YouTube*\");\r\n\t\tuint previousMonitor = BFS.Monitor.GetMonitorIDByWindow(binauralWindow);\r\n\t\tRectangle previousWindowBounds = new Rectangle();\r\n\t\tpreviousWindowBounds = BFS.Window.GetBounds(binauralWindow);\r\n        \r\n        // Set the window width percentage here\r\n        double binauralWidthPercent = 0.35;\r\n       \r\n        // Get the monitor bounds\r\n        Rectangle monitorBounds = BFS.Monitor.GetMonitorBoundsByID(activeMonitor);\r\n        Rectangle monitorWorkArea = BFS.Monitor.GetMonitorWorkAreaByID(activeMonitor);\r\n        \r\n        // Set the target window height to 100% of the screen height\r\n        int binauralWindowBoundsHeight = monitorBounds.Height;\r\n        \r\n        // Set the target Y value to the top of the monitor\r\n        int binauralWindowBoundsY = monitorBounds.Y;\r\n        \r\n        //checks if the taskbar is on the side and sets the adjustment value accordingly\r\n        int adjust = 0;\r\n        if (monitorWorkArea.Width != monitorBounds.Width) {\r\n            adjust = monitorBounds.Width - monitorWorkArea.Width;\r\n        }\r\n            \r\n        // Set the target window width to the screen width * the windowWidthPercent\r\n        int binauralWindowBoundsWidth = Convert.ToInt32(monitorBounds.Width * binauralWidthPercent) - adjust; \r\n        \r\n        // Set the target X value\r\n        int binauralWindowBoundsX = (monitorBounds.X + monitorBounds.Width - binauralWindowBoundsWidth) - adjust;\r\n        \r\n        // Create the target window bounds\r\n        Rectangle binauralWindowBounds = new Rectangle(binauralWindowBoundsX, binauralWindowBoundsY, binauralWindowBoundsWidth, binauralWindowBoundsHeight);\r\n        \r\n        // Resize and move the window\r\n        if (previousMonitor != activeMonitor || previousWindowBounds != binauralWindowBounds) {\r\n            BFS.Window.SetSizeAndLocation(binauralWindow, binauralWindowBounds.X,  binauralWindowBounds.Y, binauralWindowBounds.Width, binauralWindowBounds.Height);\r\n            BFS.ScriptSettings.DeleteValue(\"noChanges\");\r\n            BFS.ScriptSettings.WriteValueBool(\"noChanges\", false);\r\n        }\r\n\t}\r\n}",
  "description": "",
  "references": "System.Core.dll|System.Data.dll|System.dll|System.Drawing.dll|System.Management.dll|System.Web.dll|System.Windows.Forms.dll|System.Xml.dll"
}